using System;
using GS2Engine.GS2.Script;
using System.Runtime.InteropServices;

namespace GS2Engine
{
	public class Native
	{
		[UnmanagedCallersOnly(EntryPoint = "script_create")]
		public static IntPtr ScriptPtr(IntPtr first)
		{
			string? path = Marshal.PtrToStringAnsi(first);
			Script? script = new Script(path, null, null, null);
			script.GlobalObjects = null;
			script.Name = null;
			script.File = null;
			return Marshal.StructureToPtr(script, IntPtr.MaxValue, false);
		}

		[UnmanagedCallersOnly(EntryPoint = "write_line")]
		public static int WriteLine(IntPtr pString)
		{
			// The marshalling code is typically auto-generated by a custom tool in larger projects.
			try
			{
				// UnmanagedCallersOnly methods only accept primitive arguments. The primitive arguments
				// have to be marshalled manually if necessary.
				string str = Marshal.PtrToStringAnsi(pString);

				Console.WriteLine(str);
			}
			catch
			{
				// Exceptions escaping out of UnmanagedCallersOnly methods are treated as unhandled exceptions.
				// The errors have to be marshalled manually if necessary.
				return -1;
			}
			return 0;
		}

		[UnmanagedCallersOnly(EntryPoint = "sumstring")]
		public static IntPtr sumstring(IntPtr first, IntPtr second)
		{
			// Parse strings from the passed pointers 
			string my1String = Marshal.PtrToStringAnsi(first);
			string my2String = Marshal.PtrToStringAnsi(second);

			// Concatenate strings 
			string sum = my1String + my2String;

			// Assign pointer of the concatenated string to sumPointer
			IntPtr sumPointer = Marshal.StringToHGlobalAnsi(sum);

			// Return pointer
			return sumPointer;
		}
	}
}